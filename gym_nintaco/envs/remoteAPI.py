# THIS IS AN AUTOGENERATED CLASS. DO NOT MODIFY.
class _RemoteAPI(_RemoteBase):

  def __init__(self, host, port):
    _RemoteBase.__init__(self, host, port)

  def setPaused(self, paused):
    try:
      self._stream.writeByte(23)
      self._stream.writeBoolean(paused)
      self._stream.flush()
    except:
      pass

  def isPaused(self):
    try:
      self._stream.writeByte(24)
      self._stream.flush()
      return self._stream.readBoolean()
    except:
      pass
    return false

  def getFrameCount(self):
    try:
      self._stream.writeByte(25)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def getA(self):
    try:
      self._stream.writeByte(26)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def setA(self, A):
    try:
      self._stream.writeByte(27)
      self._stream.writeInt(A)
      self._stream.flush()
    except:
      pass

  def getS(self):
    try:
      self._stream.writeByte(28)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def setS(self, S):
    try:
      self._stream.writeByte(29)
      self._stream.writeInt(S)
      self._stream.flush()
    except:
      pass

  def getPC(self):
    try:
      self._stream.writeByte(30)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def setPC(self, PC):
    try:
      self._stream.writeByte(31)
      self._stream.writeInt(PC)
      self._stream.flush()
    except:
      pass

  def getX(self):
    try:
      self._stream.writeByte(32)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def setX(self, X):
    try:
      self._stream.writeByte(33)
      self._stream.writeInt(X)
      self._stream.flush()
    except:
      pass

  def getY(self):
    try:
      self._stream.writeByte(34)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def setY(self, Y):
    try:
      self._stream.writeByte(35)
      self._stream.writeInt(Y)
      self._stream.flush()
    except:
      pass

  def getP(self):
    try:
      self._stream.writeByte(36)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def setP(self, P):
    try:
      self._stream.writeByte(37)
      self._stream.writeInt(P)
      self._stream.flush()
    except:
      pass

  def isN(self):
    try:
      self._stream.writeByte(38)
      self._stream.flush()
      return self._stream.readBoolean()
    except:
      pass
    return false

  def setN(self, N):
    try:
      self._stream.writeByte(39)
      self._stream.writeBoolean(N)
      self._stream.flush()
    except:
      pass

  def isV(self):
    try:
      self._stream.writeByte(40)
      self._stream.flush()
      return self._stream.readBoolean()
    except:
      pass
    return false

  def setV(self, V):
    try:
      self._stream.writeByte(41)
      self._stream.writeBoolean(V)
      self._stream.flush()
    except:
      pass

  def isD(self):
    try:
      self._stream.writeByte(42)
      self._stream.flush()
      return self._stream.readBoolean()
    except:
      pass
    return false

  def setD(self, D):
    try:
      self._stream.writeByte(43)
      self._stream.writeBoolean(D)
      self._stream.flush()
    except:
      pass

  def isI(self):
    try:
      self._stream.writeByte(44)
      self._stream.flush()
      return self._stream.readBoolean()
    except:
      pass
    return false

  def setI(self, I):
    try:
      self._stream.writeByte(45)
      self._stream.writeBoolean(I)
      self._stream.flush()
    except:
      pass

  def isZ(self):
    try:
      self._stream.writeByte(46)
      self._stream.flush()
      return self._stream.readBoolean()
    except:
      pass
    return false

  def setZ(self, Z):
    try:
      self._stream.writeByte(47)
      self._stream.writeBoolean(Z)
      self._stream.flush()
    except:
      pass

  def isC(self):
    try:
      self._stream.writeByte(48)
      self._stream.flush()
      return self._stream.readBoolean()
    except:
      pass
    return false

  def setC(self, C):
    try:
      self._stream.writeByte(49)
      self._stream.writeBoolean(C)
      self._stream.flush()
    except:
      pass

  def getPPUv(self):
    try:
      self._stream.writeByte(50)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def setPPUv(self, v):
    try:
      self._stream.writeByte(51)
      self._stream.writeInt(v)
      self._stream.flush()
    except:
      pass

  def getPPUt(self):
    try:
      self._stream.writeByte(52)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def setPPUt(self, t):
    try:
      self._stream.writeByte(53)
      self._stream.writeInt(t)
      self._stream.flush()
    except:
      pass

  def getPPUx(self):
    try:
      self._stream.writeByte(54)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def setPPUx(self, x):
    try:
      self._stream.writeByte(55)
      self._stream.writeInt(x)
      self._stream.flush()
    except:
      pass

  def isPPUw(self):
    try:
      self._stream.writeByte(56)
      self._stream.flush()
      return self._stream.readBoolean()
    except:
      pass
    return false

  def setPPUw(self, w):
    try:
      self._stream.writeByte(57)
      self._stream.writeBoolean(w)
      self._stream.flush()
    except:
      pass

  def getCameraX(self):
    try:
      self._stream.writeByte(58)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def setCameraX(self, scrollX):
    try:
      self._stream.writeByte(59)
      self._stream.writeInt(scrollX)
      self._stream.flush()
    except:
      pass

  def getCameraY(self):
    try:
      self._stream.writeByte(60)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def setCameraY(self, scrollY):
    try:
      self._stream.writeByte(61)
      self._stream.writeInt(scrollY)
      self._stream.flush()
    except:
      pass

  def getScanline(self):
    try:
      self._stream.writeByte(62)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def getDot(self):
    try:
      self._stream.writeByte(63)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def isSpriteZeroHit(self):
    try:
      self._stream.writeByte(64)
      self._stream.flush()
      return self._stream.readBoolean()
    except:
      pass
    return false

  def setSpriteZeroHit(self, sprite0Hit):
    try:
      self._stream.writeByte(65)
      self._stream.writeBoolean(sprite0Hit)
      self._stream.flush()
    except:
      pass

  def getScanlineCount(self):
    try:
      self._stream.writeByte(66)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def requestInterrupt(self):
    try:
      self._stream.writeByte(67)
      self._stream.flush()
    except:
      pass

  def acknowledgeInterrupt(self):
    try:
      self._stream.writeByte(68)
      self._stream.flush()
    except:
      pass

  def peekCPU(self, address):
    try:
      self._stream.writeByte(69)
      self._stream.writeInt(address)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def readCPU(self, address):
    try:
      self._stream.writeByte(70)
      self._stream.writeInt(address)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def writeCPU(self, address, value):
    try:
      self._stream.writeByte(71)
      self._stream.writeInt(address)
      self._stream.writeInt(value)
      self._stream.flush()
    except:
      pass

  def peekCPU16(self, address):
    try:
      self._stream.writeByte(72)
      self._stream.writeInt(address)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def readCPU16(self, address):
    try:
      self._stream.writeByte(73)
      self._stream.writeInt(address)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def writeCPU16(self, address, value):
    try:
      self._stream.writeByte(74)
      self._stream.writeInt(address)
      self._stream.writeInt(value)
      self._stream.flush()
    except:
      pass

  def peekCPU32(self, address):
    try:
      self._stream.writeByte(75)
      self._stream.writeInt(address)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def readCPU32(self, address):
    try:
      self._stream.writeByte(76)
      self._stream.writeInt(address)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def writeCPU32(self, address, value):
    try:
      self._stream.writeByte(77)
      self._stream.writeInt(address)
      self._stream.writeInt(value)
      self._stream.flush()
    except:
      pass

  def readPPU(self, address):
    try:
      self._stream.writeByte(78)
      self._stream.writeInt(address)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def writePPU(self, address, value):
    try:
      self._stream.writeByte(79)
      self._stream.writeInt(address)
      self._stream.writeInt(value)
      self._stream.flush()
    except:
      pass

  def readPaletteRAM(self, address):
    try:
      self._stream.writeByte(80)
      self._stream.writeInt(address)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def writePaletteRAM(self, address, value):
    try:
      self._stream.writeByte(81)
      self._stream.writeInt(address)
      self._stream.writeInt(value)
      self._stream.flush()
    except:
      pass

  def readOAM(self, address):
    try:
      self._stream.writeByte(82)
      self._stream.writeInt(address)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def writeOAM(self, address, value):
    try:
      self._stream.writeByte(83)
      self._stream.writeInt(address)
      self._stream.writeInt(value)
      self._stream.flush()
    except:
      pass

  def readGamepad(self, gamepad, button):
    try:
      self._stream.writeByte(84)
      self._stream.writeInt(gamepad)
      self._stream.writeInt(button)
      self._stream.flush()
      return self._stream.readBoolean()
    except:
      pass
    return false

  def writeGamepad(self, gamepad, button, value):
    try:
      self._stream.writeByte(85)
      self._stream.writeInt(gamepad)
      self._stream.writeInt(button)
      self._stream.writeBoolean(value)
      self._stream.flush()
    except:
      pass

  def isZapperTrigger(self):
    try:
      self._stream.writeByte(86)
      self._stream.flush()
      return self._stream.readBoolean()
    except:
      pass
    return false

  def setZapperTrigger(self, zapperTrigger):
    try:
      self._stream.writeByte(87)
      self._stream.writeBoolean(zapperTrigger)
      self._stream.flush()
    except:
      pass

  def getZapperX(self):
    try:
      self._stream.writeByte(88)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def setZapperX(self, x):
    try:
      self._stream.writeByte(89)
      self._stream.writeInt(x)
      self._stream.flush()
    except:
      pass

  def getZapperY(self):
    try:
      self._stream.writeByte(90)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def setZapperY(self, y):
    try:
      self._stream.writeByte(91)
      self._stream.writeInt(y)
      self._stream.flush()
    except:
      pass

  def setColor(self, color):
    try:
      self._stream.writeByte(92)
      self._stream.writeInt(color)
      self._stream.flush()
    except:
      pass

  def getColor(self):
    try:
      self._stream.writeByte(93)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def setClip(self, x, y, width, height):
    try:
      self._stream.writeByte(94)
      self._stream.writeInt(x)
      self._stream.writeInt(y)
      self._stream.writeInt(width)
      self._stream.writeInt(height)
      self._stream.flush()
    except:
      pass

  def clipRect(self, x, y, width, height):
    try:
      self._stream.writeByte(95)
      self._stream.writeInt(x)
      self._stream.writeInt(y)
      self._stream.writeInt(width)
      self._stream.writeInt(height)
      self._stream.flush()
    except:
      pass

  def resetClip(self):
    try:
      self._stream.writeByte(96)
      self._stream.flush()
    except:
      pass

  def copyArea(self, x, y, width, height, dx, dy):
    try:
      self._stream.writeByte(97)
      self._stream.writeInt(x)
      self._stream.writeInt(y)
      self._stream.writeInt(width)
      self._stream.writeInt(height)
      self._stream.writeInt(dx)
      self._stream.writeInt(dy)
      self._stream.flush()
    except:
      pass

  def drawLine(self, x1, y1, x2, y2):
    try:
      self._stream.writeByte(98)
      self._stream.writeInt(x1)
      self._stream.writeInt(y1)
      self._stream.writeInt(x2)
      self._stream.writeInt(y2)
      self._stream.flush()
    except:
      pass

  def drawOval(self, x, y, width, height):
    try:
      self._stream.writeByte(99)
      self._stream.writeInt(x)
      self._stream.writeInt(y)
      self._stream.writeInt(width)
      self._stream.writeInt(height)
      self._stream.flush()
    except:
      pass

  def drawPolygon(self, xPoints, yPoints, nPoints):
    try:
      self._stream.writeByte(100)
      self._stream.writeIntArray(xPoints)
      self._stream.writeIntArray(yPoints)
      self._stream.writeInt(nPoints)
      self._stream.flush()
    except:
      pass

  def drawPolyline(self, xPoints, yPoints, nPoints):
    try:
      self._stream.writeByte(101)
      self._stream.writeIntArray(xPoints)
      self._stream.writeIntArray(yPoints)
      self._stream.writeInt(nPoints)
      self._stream.flush()
    except:
      pass

  def drawRect(self, x, y, width, height):
    try:
      self._stream.writeByte(102)
      self._stream.writeInt(x)
      self._stream.writeInt(y)
      self._stream.writeInt(width)
      self._stream.writeInt(height)
      self._stream.flush()
    except:
      pass

  def drawRoundRect(self, x, y, width, height, arcWidth, arcHeight):
    try:
      self._stream.writeByte(103)
      self._stream.writeInt(x)
      self._stream.writeInt(y)
      self._stream.writeInt(width)
      self._stream.writeInt(height)
      self._stream.writeInt(arcWidth)
      self._stream.writeInt(arcHeight)
      self._stream.flush()
    except:
      pass

  def draw3DRect(self, x, y, width, height, raised):
    try:
      self._stream.writeByte(104)
      self._stream.writeInt(x)
      self._stream.writeInt(y)
      self._stream.writeInt(width)
      self._stream.writeInt(height)
      self._stream.writeBoolean(raised)
      self._stream.flush()
    except:
      pass

  def drawArc(self, x, y, width, height, startAngle, arcAngle):
    try:
      self._stream.writeByte(105)
      self._stream.writeInt(x)
      self._stream.writeInt(y)
      self._stream.writeInt(width)
      self._stream.writeInt(height)
      self._stream.writeInt(startAngle)
      self._stream.writeInt(arcAngle)
      self._stream.flush()
    except:
      pass

  def fill3DRect(self, x, y, width, height, raised):
    try:
      self._stream.writeByte(106)
      self._stream.writeInt(x)
      self._stream.writeInt(y)
      self._stream.writeInt(width)
      self._stream.writeInt(height)
      self._stream.writeBoolean(raised)
      self._stream.flush()
    except:
      pass

  def fillArc(self, x, y, width, height, startAngle, arcAngle):
    try:
      self._stream.writeByte(107)
      self._stream.writeInt(x)
      self._stream.writeInt(y)
      self._stream.writeInt(width)
      self._stream.writeInt(height)
      self._stream.writeInt(startAngle)
      self._stream.writeInt(arcAngle)
      self._stream.flush()
    except:
      pass

  def fillOval(self, x, y, width, height):
    try:
      self._stream.writeByte(108)
      self._stream.writeInt(x)
      self._stream.writeInt(y)
      self._stream.writeInt(width)
      self._stream.writeInt(height)
      self._stream.flush()
    except:
      pass

  def fillPolygon(self, xPoints, yPoints, nPoints):
    try:
      self._stream.writeByte(109)
      self._stream.writeIntArray(xPoints)
      self._stream.writeIntArray(yPoints)
      self._stream.writeInt(nPoints)
      self._stream.flush()
    except:
      pass

  def fillRect(self, x, y, width, height):
    try:
      self._stream.writeByte(110)
      self._stream.writeInt(x)
      self._stream.writeInt(y)
      self._stream.writeInt(width)
      self._stream.writeInt(height)
      self._stream.flush()
    except:
      pass

  def fillRoundRect(self, x, y, width, height, arcWidth, arcHeight):
    try:
      self._stream.writeByte(111)
      self._stream.writeInt(x)
      self._stream.writeInt(y)
      self._stream.writeInt(width)
      self._stream.writeInt(height)
      self._stream.writeInt(arcWidth)
      self._stream.writeInt(arcHeight)
      self._stream.flush()
    except:
      pass

  def drawChar(self, c, x, y):
    try:
      self._stream.writeByte(112)
      self._stream.writeChar(c)
      self._stream.writeInt(x)
      self._stream.writeInt(y)
      self._stream.flush()
    except:
      pass

  def drawChars(self, data, offset, length, x, y, monospaced):
    try:
      self._stream.writeByte(113)
      self._stream.writeCharArray(data)
      self._stream.writeInt(offset)
      self._stream.writeInt(length)
      self._stream.writeInt(x)
      self._stream.writeInt(y)
      self._stream.writeBoolean(monospaced)
      self._stream.flush()
    except:
      pass

  def drawString(self, str, x, y, monospaced):
    try:
      self._stream.writeByte(114)
      self._stream.writeString(str)
      self._stream.writeInt(x)
      self._stream.writeInt(y)
      self._stream.writeBoolean(monospaced)
      self._stream.flush()
    except:
      pass

  def createSprite(self, id, width, height, pixels):
    try:
      self._stream.writeByte(115)
      self._stream.writeInt(id)
      self._stream.writeInt(width)
      self._stream.writeInt(height)
      self._stream.writeIntArray(pixels)
      self._stream.flush()
    except:
      pass

  def drawSprite(self, id, x, y):
    try:
      self._stream.writeByte(116)
      self._stream.writeInt(id)
      self._stream.writeInt(x)
      self._stream.writeInt(y)
      self._stream.flush()
    except:
      pass

  def setPixel(self, x, y, color):
    try:
      self._stream.writeByte(117)
      self._stream.writeInt(x)
      self._stream.writeInt(y)
      self._stream.writeInt(color)
      self._stream.flush()
    except:
      pass

  def getPixel(self, x, y):
    try:
      self._stream.writeByte(118)
      self._stream.writeInt(x)
      self._stream.writeInt(y)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def powerCycle(self):
    try:
      self._stream.writeByte(120)
      self._stream.flush()
    except:
      pass

  def reset(self):
    try:
      self._stream.writeByte(121)
      self._stream.flush()
    except:
      pass

  def deleteSprite(self, id):
    try:
      self._stream.writeByte(122)
      self._stream.writeInt(id)
      self._stream.flush()
    except:
      pass

  def setSpeed(self, percent):
    try:
      self._stream.writeByte(123)
      self._stream.writeInt(percent)
      self._stream.flush()
    except:
      pass

  def stepToNextFrame(self):
    try:
      self._stream.writeByte(124)
      self._stream.flush()
    except:
      pass

  def showMessage(self, message):
    try:
      self._stream.writeByte(125)
      self._stream.writeString(message)
      self._stream.flush()
    except:
      pass

  def getWorkingDirectory(self):
    try:
      self._stream.writeByte(126)
      self._stream.flush()
      return self._stream.readString()
    except:
      pass
    return null

  def getContentDirectory(self):
    try:
      self._stream.writeByte(127)
      self._stream.flush()
      return self._stream.readString()
    except:
      pass
    return null

  def open(self, fileName):
    try:
      self._stream.writeByte(128)
      self._stream.writeString(fileName)
      self._stream.flush()
    except:
      pass

  def openArchiveEntry(self, archiveFileName, entryFileName):
    try:
      self._stream.writeByte(129)
      self._stream.writeString(archiveFileName)
      self._stream.writeString(entryFileName)
      self._stream.flush()
    except:
      pass

  def getArchiveEntries(self, archiveFileName):
    try:
      self._stream.writeByte(130)
      self._stream.writeString(archiveFileName)
      self._stream.flush()
      return self._stream.readDynamicStringArray()
    except:
      pass
    return null

  def getDefaultArchiveEntry(self, archiveFileName):
    try:
      self._stream.writeByte(131)
      self._stream.writeString(archiveFileName)
      self._stream.flush()
      return self._stream.readString()
    except:
      pass
    return null

  def openDefaultArchiveEntry(self, archiveFileName):
    try:
      self._stream.writeByte(132)
      self._stream.writeString(archiveFileName)
      self._stream.flush()
    except:
      pass

  def close(self):
    try:
      self._stream.writeByte(133)
      self._stream.flush()
    except:
      pass

  def saveState(self, stateFileName):
    try:
      self._stream.writeByte(134)
      self._stream.writeString(stateFileName)
      self._stream.flush()
    except:
      pass

  def loadState(self, stateFileName):
    try:
      self._stream.writeByte(135)
      self._stream.writeString(stateFileName)
      self._stream.flush()
    except:
      pass

  def quickSaveState(self, slot):
    try:
      self._stream.writeByte(136)
      self._stream.writeInt(slot)
      self._stream.flush()
    except:
      pass

  def quickLoadState(self, slot):
    try:
      self._stream.writeByte(137)
      self._stream.writeInt(slot)
      self._stream.flush()
    except:
      pass

  def setTVSystem(self, tvSystem):
    try:
      self._stream.writeByte(138)
      self._stream.writeString(tvSystem)
      self._stream.flush()
    except:
      pass

  def getTVSystem(self):
    try:
      self._stream.writeByte(139)
      self._stream.flush()
      return self._stream.readString()
    except:
      pass
    return null

  def getDiskSides(self):
    try:
      self._stream.writeByte(140)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def insertDisk(self, disk, side):
    try:
      self._stream.writeByte(141)
      self._stream.writeInt(disk)
      self._stream.writeInt(side)
      self._stream.flush()
    except:
      pass

  def flipDiskSide(self):
    try:
      self._stream.writeByte(142)
      self._stream.flush()
    except:
      pass

  def ejectDisk(self):
    try:
      self._stream.writeByte(143)
      self._stream.flush()
    except:
      pass

  def insertCoin(self):
    try:
      self._stream.writeByte(144)
      self._stream.flush()
    except:
      pass

  def pressServiceButton(self):
    try:
      self._stream.writeByte(145)
      self._stream.flush()
    except:
      pass

  def screamIntoMicrophone(self):
    try:
      self._stream.writeByte(146)
      self._stream.flush()
    except:
      pass

  def glitch(self):
    try:
      self._stream.writeByte(147)
      self._stream.flush()
    except:
      pass

  def getFileInfo(self):
    try:
      self._stream.writeByte(148)
      self._stream.flush()
      return self._stream.readString()
    except:
      pass
    return null

  def setFullscreenMode(self, fullscreenMode):
    try:
      self._stream.writeByte(149)
      self._stream.writeBoolean(fullscreenMode)
      self._stream.flush()
    except:
      pass

  def saveScreenshot(self):
    try:
      self._stream.writeByte(150)
      self._stream.flush()
    except:
      pass

  def addCheat(self, address, value, compare, description, enabled):
    try:
      self._stream.writeByte(151)
      self._stream.writeInt(address)
      self._stream.writeInt(value)
      self._stream.writeInt(compare)
      self._stream.writeString(description)
      self._stream.writeBoolean(enabled)
      self._stream.flush()
    except:
      pass

  def removeCheat(self, address, value, compare):
    try:
      self._stream.writeByte(152)
      self._stream.writeInt(address)
      self._stream.writeInt(value)
      self._stream.writeInt(compare)
      self._stream.flush()
    except:
      pass

  def addGameGenie(self, gameGenieCode, description, enabled):
    try:
      self._stream.writeByte(153)
      self._stream.writeString(gameGenieCode)
      self._stream.writeString(description)
      self._stream.writeBoolean(enabled)
      self._stream.flush()
    except:
      pass

  def removeGameGenie(self, gameGenieCode):
    try:
      self._stream.writeByte(154)
      self._stream.writeString(gameGenieCode)
      self._stream.flush()
    except:
      pass

  def addProActionRocky(self, proActionRockyCode, description, enabled):
    try:
      self._stream.writeByte(155)
      self._stream.writeString(proActionRockyCode)
      self._stream.writeString(description)
      self._stream.writeBoolean(enabled)
      self._stream.flush()
    except:
      pass

  def removeProActionRocky(self, proActionRockyCode):
    try:
      self._stream.writeByte(156)
      self._stream.writeString(proActionRockyCode)
      self._stream.flush()
    except:
      pass

  def getPrgRomSize(self):
    try:
      self._stream.writeByte(157)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def readPrgRom(self, index):
    try:
      self._stream.writeByte(158)
      self._stream.writeInt(index)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def writePrgRom(self, index, value):
    try:
      self._stream.writeByte(159)
      self._stream.writeInt(index)
      self._stream.writeInt(value)
      self._stream.flush()
    except:
      pass

  def getChrRomSize(self):
    try:
      self._stream.writeByte(160)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def readChrRom(self, index):
    try:
      self._stream.writeByte(161)
      self._stream.writeInt(index)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def writeChrRom(self, index, value):
    try:
      self._stream.writeByte(162)
      self._stream.writeInt(index)
      self._stream.writeInt(value)
      self._stream.flush()
    except:
      pass

  def getStringWidth(self, str, monospaced):
    try:
      self._stream.writeByte(163)
      self._stream.writeString(str)
      self._stream.writeBoolean(monospaced)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1

  def getCharsWidth(self, chars, monospaced):
    try:
      self._stream.writeByte(164)
      self._stream.writeCharArray(chars)
      self._stream.writeBoolean(monospaced)
      self._stream.flush()
      return self._stream.readInt()
    except:
      pass
    return -1
